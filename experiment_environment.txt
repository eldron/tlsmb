experiment environment:

sudo yum install openssl-devel
sudo apt-get install python-pip
pip install six
pip install ecdsa
pip install selectors2
sudo yum install python-devel
sudo pip install pycrypto
sudo pip install M2Cryto
sudo yum install gmp-devel
sudo pip install gmpy
git clone tlslite-ng
sudo python setup.py install


or use virtualenv:
sudo yum install python-devel
sudo yum install gmp-devel
first virtualenv somedir, activate it
then: pip install six ecdsa selectors2 pycrypto M2Cryto gmpy
then python setup.py install (to install tlslite)

Run experiments:

no encryption, http server:
1.  cd into test_server
    python simple_http_server 127.0.0.1:20000

2.  start inspection server:
LD_LIBRARY_PATH=~/Documents/openssl ./inspection 0 rules_96000 2000 0

3.  start middlebox
    python simple_mb.py 127.0.0.1 10000 1
4.  run http_client.py (direct download or through middlebox)
time python http_client.py 127.0.0.1 10000 127.0.0.1 20000


small packets, response delay:
clamav rules:
	chacha20		aes128			aes256
10000	1.44302916527		1.03634786606		1.06948590279
20000	1.43652391434		1.01316595078		1.01058697701
30000	1.42324519157		1.02435302734		1.02081799507
40000	1.5063419342		1.06930708885		1.03862190247
50000	1.43490982056		1.02531099319		1.02557897568
60000	1.41899585724		1.02577805519		1.03734898567
70000	1.4660718441		1.03195905685		1.03564095497
80000	1.41928386688		1.05438089371		1.03800797462
90000	1.46317791939		1.06354022026		1.03335499763

content_size = 100
	chacha20		aes128			aes256
10000	1.96779704094		1.62859797478		1.54400515556
20000	2.16273498535		1.6172311306		2.2653439045
30000	2.06720113754		1.64466500282		1.73375511169
40000	1.98570585251		2.03855705261		1.53141117096
50000	2.5212700367		1.61237192154		1.85365605354
60000	2.44453597069		1.49153804779		1.87879800797
70000	2.06467199326		1.97384691238		2.09148097038
80000	2.07259011269		2.04894089699		1.83998417854
90000	2.11341309547		1.61430597305		1.60321998596

content_size = 500
	chacha20		aes128			aes256
10000	4.09683394432		3.30345702171		3.36488413811
20000	3.45930194855		3.30940699577		3.34552598
30000	3.99316287041		3.1442630291		2.87850809097
40000	3.49000096321		3.17335605621		2.91702198982
50000	3.52669405937		3.45015597343		2.8378059864
60000	3.56556296349		3.05363297462		2.88013410568
70000	3.57987499237		3.3934431076		2.90379285812
80000	3.49053096771		3.33572411537		2.90200304985
90000	3.70055985451		3.38532614708		2.91900992393

content_size = 1000
	chacha20		aes128			aes256
10000	5.03372812271		5.36590600014		5.7919960022
20000	5.3702890873		5.36484193802		5.00840997696
30000	5.11350703239		4.90303611755		5.80130791664
40000	5.29645586014		5.24184012413		5.03029203415
50000	4.84683585167		5.52334594727		5.33303904533
60000	5.18175911903		5.67083978653		5.06476807594
70000	5.02722811699		5.61527895927		5.4874458313
80000	5.53402686119		6.64525485039		6.19991111755
90000	5.47195506096		5.01926183701		6.11419701576

the number of rules fixed at 20000
content_size	chacha20		aes128			aes256
100		2.07250094414		1.60418891907		1.5114428997
200		2.47048807144		2.26194286346		1.84503602982
300		3.18156385422		2.48755311966		2.21589899063
400		3.2995531559		2.70657896996		2.53289890289
500		3.45846605301		3.08984494209		2.89309191704
600		3.95951008797		3.53744387627		3.20178103447
700		4.07193803787		3.79931902885		3.57046604156
800		4.46838521957		4.13116908073		3.91422200203
900		4.83099007607		4.62701201439		4.26197290421
1000		5.39338684082		4.6564309597		4.52933192253


tls encryption, tls server
1.  cd into test_server
    python tls.py server -c serverX509Cert.pem -k serverX509Key.pem 127.0.0.1:20000
2.  start inspection server
    LD_LIBRARY_PATH=~/Documents/openssl ./inspection 0 rules_96000 2000 128
3.  start middlebox
    python mb.py 127.0.0.1 10000 1
4.  run tls_client.py
python tls_client.py 127.0.0.1 10000 127.0.0.1 20000 aes256gcm x25519


tls encryption, no middlebox:
1.  cd into test_server
    tls.py server -c serverX509Cert.pem -k serverX509Key.pem 127.0.0.1:4443
2.  time python test_client.py

tls encryption, download file through middlebox:
1.  cd into test_server
    tls.py server -c serverX509Cert.pem -k serverX509Key.pem 127.0.0.1:4443
2.  start inspection server
3.  start middlebox
    
test connection setup delay:
python tls.py server -c serverX509Cert.pem -k serverX509Key.pem --psk 0000000000000000000000000000000000000000000000000000000000000000 --psk-ident pskidentity --psk-sha384 202.197.15.1:20000

sudo systemctl stop firewalld
desktop as server, x270 as client, 100 connections
psk_only:
            can_dec=0   can_dec=1
x25519      1.614       2.764
x448        3.003       3.345
secp256r1   11.455      13.051
secp384r1   27.516      29.627
secp521r1   49.278      51.043

psk_with_dhe:
            can_dec=0   can_dec=1
x25519      1.686       2.855
x448        3.042       3.356
secp256r1   11.486      13.505
secp384r1   27.814      29.507
secp521r1   49.310      52.288

dhe_only
            can_dec=0   can_dec=1
x25519      1.988       2.934
x448        3.196       3.515
secp256r1   11.580      12.525      
secp384r1   27.798      29.718
secp521r1   52.026      53.455

data:
test delay, 20 connections:

aes128gcm
            can_dec=0   can_dec=1
x448        0.719       0.761
x25519      0.456       0.609
secp256r1   2.287       2.552
secp384r1   5.165       5.319
secp521r1   8.957       9.122

aes256gcm
            can_dec=0   can_dec=1
x448        0.727       0.764
x25519      0.437       0.603
secp256r1   2.363       2.6
secp384r1   5.031       5.215
secp521r1   9.089       9.149

chacha20-poly1305
            can_dec=0   can_dec=1
x448        0.746       0.853
x25519      0.446       0.619
secp256r1   2.299       2.546
secp384r1   5.042       5.242
secp521r1   9.436       9.829


100 connections, x270
cmd:
run tls.py server
run test_conn_delay.py

aes128gcm
            can_dec=0   can_dec=1
x448        2.718       3.019
x25519      1.591       2.516
secp256r1   9.468       10.897
secp384r1   25.502      25.974
secp521r1   43.817      44.513

aes256gcm
            can_dec=0   can_dec=1
x448        2.7         3.024
x25519      1.596       2.447
secp256r1   9.409       11.007
secp384r1   25.780      26.955
secp521r1   43.909      44.766

chacha20-poly1305
            can_dec=0   can_dec=1
x448        2.741       3.094
x25519      1.692       2.544
secp256r1   9.583       11.073
secp384r1   26.381      27.02
secp521r1   43.824      44.477

inspection throughput:

download through simple middlebox:
cmd:
1. run tls.py server
2. run simple_mb (no inspection)
3. run tls_client

x25519 aes128gcm
13.039
13.05
13.019
13.109
13.090
13.113
13.2
13.343
13.183
13.153
mean: 13.1299

x25519 aes256gcm
13.151
13.182
13.381
13.159
13.482
13.137
13.294
13.177
13.150
13.145
mean: 13.2258

x25519 chacha20-poly1305
12.243
12.252
12.692
12.354
12.309
12.294
12.304
12.349
12.3
12.327
mean: 12.342

snort rules: 3000 rules
x25519 aes128gcm
13.209
13.1
13.235
13.638
12.996
13.244
12.951
13.956
13.01
13.099

x25519 aes256gcm
13.074
12.882
12.913
13.126
12.970
13.066
13.111
13.658
13.340
13.05

x25519 chacha20-poly1305
12.439
12.156
12.191
12.137
12.385
12.141
12.266
12.147
12.143
12.178

clamav rules
x25519 aes128gcm
4000
8000
12000
16000
20000
24000
28000
32000
36000


memort usage, using memory_profiler
cmd: mprof run --include-children mb.py ...
# of connections    RES(MB)         VIRT
100                 35.894531
200                 41.191406
300                 52.625
400                 55.152344
500
600
700
800
900
1000

500                 65.523438
1000                126.703125
1500                193.378906
2000                253.527344
2500                345.519531
3000                428.714844
3500                488.613281
4000                516.265625
4500                692.804688
5000                732.492188
